#!/usr/bin/perl

use v5.12;

use strict;
use warnings;

use IO::File;
use Math::Trig qw(deg2rad pip2 great_circle_distance);
use JSON::XS;
use LWP::UserAgent;
use YAML::XS qw(LoadFile DumpFile);

my $originfile = shift @ARGV;
my $clusterfile = shift @ARGV;
my $zone = shift @ARGV;
my $targetoriginfile = shift @ARGV;
my $origins = LoadFile($originfile);
my $clusters = LoadFile($clusterfile);
my $gdnsname = shift @ARGV;
my @servers;

# Initialise cluster details
while (my($name,$cluster) = each %$clusters)
{
    if ($cluster->{servers})
    {
        $cluster->{requests} = 0;

        foreach my $server (@{$cluster->{servers}})
        {
            $server->{cluster} = $cluster;
            $cluster->{requests} = $cluster->{requests} + $server->{requests};

            push @servers, $server;
        }
    }
    elsif ($cluster->{requests} > 0)
    {
        my $server = {
            cluster => $cluster,
            statuscake => $cluster->{statuscake},
            requests => $cluster->{requests},
            cname => $cluster->{cname},
            ipv4 => $cluster->{ipv4},
            ipv6 => $cluster->{ipv6}
        };

        $cluster->{servers} = [ $server ];

        push @servers, $server;
    }
    else
    {
        $cluster->{servers} = [];
    }

    $cluster->{name} = $name;
    $cluster->{status} = "down";
}

# Initialise server details
foreach my $server (@servers)
{
    $server->{status} = "up";
}

# If statuscake support is enabled then check which servers are up
if ($ENV{STATUSCAKE_APIKEY})
{
    my $ua = LWP::UserAgent->new;
    my $cache;

    $ua->agent("mkgeo/1.0");
    $ua->default_header("Authorization", "Bearer $ENV{STATUSCAKE_APIKEY}");

    if (-f "statuscake.yml")
    {
        $cache = LoadFile("statuscake.yml");
    }
    else
    {
        $cache = {};
    }

    my $page = 1;
    my $pages = 1;

    while ($page <= $pages)
    {
        my $response = $ua->get("https://api.statuscake.com/v1/uptime?nouptime=true&limit=100&page=${page}");

        if ($response->is_success)
        {
            my $uptime = decode_json($response->content);

            foreach my $test (@{$uptime->{data}})
            {
                my $testid = $test->{id};

                if ($test->{status} eq "up" && !$test->{paused})
                {
                    $cache->{$testid} = "up";
                }
                else
                {
                    $cache->{$testid} = "down";
                }
            }

            $page = $page + 1;
            $pages = $uptime->{metadata}->{page_count};
        }
    }

    foreach my $server (@servers)
    {
        if (my $testids = $server->{statuscake})
        {
            $server->{status} = "up";

            for my $testid (@$testids)
            {
                my $testresult = $cache->{$testid} || "down";

                $server->{status} = "down" if $testresult eq "down";
            }
        }
        else
        {
            $server->{status} = "down";
        }
    }

    DumpFile("statuscake-$$.yml", $cache);
    rename("statuscake-$$.yml", "statuscake.yml");
}

# Mark a cluster as up if any servers are up
foreach my $server (@servers)
{
    if ($server->{status} eq "up")
    {
        $server->{cluster}->{status} = "up";
    }
    else
    {
        $server->{cluster}->{requests} = $server->{cluster}->{requests} - $server->{requests};
    }
}

# Abort if no servers at all are up
exit 0 unless grep { $_->{status} eq "up" } values(%$clusters);

# Create target origins object
my $targetorigins = {};

# Initialise cluster details
while (my($name,$cluster) = each %$clusters)
{
    $cluster->{requests_limit} = $cluster->{requests};
    $cluster->{requests_used} = 0;

    next if $cluster->{global};

    $targetorigins->{$cluster->{name}} = {
        code => $cluster->{name},
        name => $cluster->{name},
        lat => $cluster->{lat},
        lon => $cluster->{lon},
        requests => 0
    };
}

my @mappings = ();

# Scan origins and work out which clusters each can use
foreach my $origin (values %$origins)
{
    foreach my $cluster (values %$clusters)
    {
        my $match = match_origin($cluster, $origin);

        if ($cluster->{status} eq "up" && $match ne "denied")
        {
            my $priority = $match eq "preferred" ? 20 : 10;
            my $distance;

            if ($cluster->{global})
            {
                $distance = 0;
            }
            else
            {
                $distance = distance($origin->{lat}, $origin->{lon}, $cluster->{lat}, $cluster->{lon});
            }

            push @mappings, {
                origin => $origin, cluster => $cluster,
                priority => $priority, distance => $distance
            };
        }
    }
}

# Allocate each country to a cluster
allocate_clusters(@mappings);

# If we failed to allocate every origin then loop, increasing
# the requests for each cluster by a little and retrying until
# we manage to allocate everything
while (grep { !exists($_->{cluster}) } values %$origins)
{
    # Clear any existing mappings of countries to clusters
    foreach my $origin (values %$origins)
    {
        delete $origin->{cluster};
    }

    # Reset requests usage for clusters and increase limits by 10%
    foreach my $cluster (values %$clusters)
    {
        $cluster->{requests_used} = 0;
        $cluster->{requests_limit} = $cluster->{requests_limit} * 1.1;
    }

    # Try the allocate again
    allocate_clusters(@mappings);
}

# Report on allocation results
foreach my $name (sort keys %$clusters)
{
    my $cluster = $clusters->{$name};
    my $used = int($cluster->{requests_used} + 0.5);
    my $limit = $cluster->{requests_limit};

    if ($limit > 0)
    {
        my $proportion = int($used / $limit * 100 + 0.5);
    
        print "${name}: used ${used} of ${limit} (${proportion}%)\n";
    }
    else
    {
        print "${name}: used ${used} of ${limit}\n";
    }
}

# Create JSON collection object
my @json;

# Open output files
my $zonefile = IO::File->new("> include/${zone}.js") || die "$!";
my $jsonfile = IO::File->new("> json/${zone}.openstreetmap.org.json") || die "$!";

# Output headers
$zonefile->print("var \U${zone}\E_RECORDS = [\n");

# Output details for each country
foreach my $origin (sort { $a->{name} cmp $b->{name} } values %$origins)
{
    my $cluster = $origin->{cluster};

    if (!defined($gdnsname))
    {
        $zonefile->print("  CNAME(\"\L$origin->{code}\E.${zone}\", \"$cluster->{name}.${zone}.openstreetmap.org.\", TTL(\"10m\")),\n");
    }

    if ($cluster->{lon} && $cluster->{lat})
    {
        my $clon = $origin->{lon};
        my $clat = $origin->{lat};
        my $slon = $cluster->{lon};
        my $slat = $cluster->{lat};

        if ($clon > 0 && $slon < 0 && 360 + $slon - $clon < $clon - $slon)
        {
            $slon = $slon + 360;
        }
        elsif ($slon > 0 && $clon < 0 && 360 + $clon - $slon < $slon - $clon)
        {
            $clon = $clon + 360;
        }

        push @json, {
            type => "Feature",
            geometry => {
                type => "LineString",
                coordinates => [ [ $clon, $clat ], [ $slon, $slat ] ]
            },
            properties => {
                origin => $origin->{name},
                server => $cluster->{name},
                colour => $cluster->{colour}
            }
        };
    }

    next if $cluster->{global};

    $targetorigins->{$cluster->{name}}->{requests} += $origin->{requests};
}

# Skip default records if we don't need them
if (!defined($gdnsname))
{
    # Output default records for IPs that can't be mapped to a country
    foreach my $cluster (sort { $a->{name} cmp $b->{name} } values %$clusters)
    {
        my $name = $cluster->{name};

        if (my $default = $cluster->{default})
        {
            output_server($zonefile, "${default}.${zone}", $cluster, 0);
        }
        elsif (exists($cluster->{default}))
        {
            output_server($zonefile, "${zone}", $cluster, 0);
        }
    }
}

# Output A records for each cluster
foreach my $cluster (sort { $a->{name} cmp $b->{name} } values %$clusters)
{
    my $name = $cluster->{name};

    if (@{$cluster->{servers}} > 1)
    {
        output_server($zonefile, "${name}-%02d.${zone}", $cluster, 1);
    }
    else
    {
        output_server($zonefile, "${name}.${zone}", $cluster, 1);
    }
}

# Output the GeoJSON text
$jsonfile->print(encode_json(\@json));

# Output footers
$zonefile->print("];\n");

# Close the output files
$zonefile->close();
$zonefile->close();

# Output gdnsd configuration
if (defined($gdnsname))
{
    my $gdnsmapfile = IO::File->new("> gdns/${gdnsname}.map") || die "$!";
    my $gdnsresourcefile = IO::File->new("> gdns/${gdnsname}.resource") || die "$!";
    my $gdnsweightedfile = IO::File->new("> gdns/${gdnsname}.weighted") || die "$!";
    my $continent = "";

    $gdnsmapfile->print("${gdnsname} => {\n");
    $gdnsmapfile->print("  geoip2_db => /usr/share/GeoIP/GeoLite2-Country.mmdb\n");
    $gdnsmapfile->print("  datacenters => [" . join(",", sort(keys(%$clusters))) . "]\n");
    $gdnsmapfile->print("  map => {\n");
    $gdnsmapfile->print("    default => [" . join(",", sort(map { $_->{name} } grep { $_->{default} } values(%$clusters))) . "]\n");

    foreach my $origin (sort { $a->{continent} cmp $b->{continent} || $a->{code} cmp $b->{code} } values %$origins)
    {
        my $code = $origin->{code};
        my $cluster = $origin->{cluster}->{name};

        next if $code eq "XK";

        if ($continent ne $origin->{continent})
        {
            $gdnsmapfile->print("    }\n") if $continent;

            $continent = $origin->{continent};

            $gdnsmapfile->print("    ${continent} => {\n");
        }

        $gdnsmapfile->print("      ${code} => [${cluster}]\n");
    }

    $gdnsmapfile->print("    }\n") if $continent;

    $gdnsmapfile->print("  }\n");
    $gdnsmapfile->print("}\n");

    $gdnsresourcefile->print("${gdnsname} => {\n");
    $gdnsresourcefile->print("  map => ${gdnsname}\n");
    $gdnsresourcefile->print("  dcmap => {\n");

    foreach my $cluster (sort { $a->{name} cmp $b->{name} } values %$clusters)
    {
        my $name = $cluster->{name};

        if (@{$cluster->{servers}} > 1 && grep { $_->{status} eq "up" } @{$cluster->{servers}})
        {
            $gdnsweightedfile->print("${name} => {\n");

            while (my($index,$server) = each @{$cluster->{servers}})
            {
                if ($server->{status} eq "up")
                {
                    my $number = sprintf("%02d", $index + 1);
                    my $requests = $server->{requests};

                    if (my $cname = $server->{cname})
                    {
                        $gdnsweightedfile->print("  ${name}-${number} = [ ${cname}., ${requests} ]\n");
                    }
                    else
                    {
                        $gdnsweightedfile->print("  ${name}-${number} = [ ${name}-${number}.${zone}.openstreetmap.org., ${requests} ]\n");
                    }
                }
            }

            $gdnsweightedfile->print("}\n");

            $gdnsresourcefile->print("    ${name} => %weighted!${name}\n");
        }
        elsif (my $cname = $cluster->{cname})
        {
            $gdnsresourcefile->print("    ${name} => ${cname}.\n");
        }
        else
        {
            $gdnsresourcefile->print("    ${name} => ${name}.${zone}.openstreetmap.org.\n");
        }
    }

    $gdnsresourcefile->print("  }\n");
    $gdnsresourcefile->print("}\n");

    $gdnsweightedfile->close();
    $gdnsresourcefile->close();
    $gdnsmapfile->close();
}

# Output the target details in origin format if required
DumpFile($targetoriginfile, $targetorigins) if $targetoriginfile;

exit 0;

#
# Match an origin against a cluster
#
sub match_origin
{
    my $cluster = shift;
    my $origin = shift;
    my $match;

    if ($cluster->{preferred} &&
        $cluster->{preferred}->{origins} &&
        grep { $_ eq $origin->{name} } @{$cluster->{preferred}->{origins}})
    {
        $match = "preferred";
    }
    elsif ($cluster->{allowed} &&
           $cluster->{allowed}->{origins} &&
           grep { $_ eq $origin->{name} } @{$cluster->{allowed}->{origins}})
    {
        $match = "allowed";
    }
    elsif ($cluster->{preferred} &&
           $cluster->{preferred}->{countries} &&
           grep { $_ eq $origin->{country} } @{$cluster->{preferred}->{countries}})
    {
        $match = "preferred";
    }
    elsif ($cluster->{allowed} &&
           $cluster->{allowed}->{countries} &&
           grep { $_ eq $origin->{country} } @{$cluster->{allowed}->{countries}})
    {
        $match = "allowed";
    }
    elsif ($cluster->{denied} &&
           $cluster->{denied}->{countries} &&
           grep { $_ eq $origin->{country} } @{$cluster->{denied}->{countries}})
    {
        $match = "denied";
    }
    elsif ($cluster->{preferred} &&
           $cluster->{preferred}->{continents} &&
           grep { $_ eq $origin->{continent} } @{$cluster->{preferred}->{continents}})
    {
        $match = "preferred";
    }
    elsif ($cluster->{allowed} &&
           $cluster->{allowed}->{continents} &&
           grep { $_ eq $origin->{continent} } @{$cluster->{allowed}->{continents}})
    {
        $match = "allowed";
    }
    elsif ($cluster->{denied} &&
           $cluster->{denied}->{continents} &&
           grep { $_ eq $origin->{continent} } @{$cluster->{denied}->{continents}})
    {
        $match = "denied";
    }
    elsif ($cluster->{allowed})
    {
        $match = "denied";
    }
    else
    {
        $match = "allowed";
    }

    return $match;
}

#
# Compute the great circle distance between two points
#
sub distance
{
    my $lat1 = deg2rad(shift);
    my $lon1 = deg2rad(shift);
    my $lat2 = deg2rad(shift);
    my $lon2 = deg2rad(shift);

    return great_circle_distance($lon1, pip2 - $lat1, $lon2, pip2 - $lat2);
}

#
# Allocate each origin to a cluster
#
sub allocate_clusters
{
    my @mappings = sort { compare_mappings($a, $b) } @_;

    # Loop over the mappings, trying to assign each origin to the
    # nearest cluster, but subject to the request limits
    while (my $mapping = shift @mappings)
    {
        my @group;

        push @group, $mapping;

        while (@mappings && compare_mappings($mapping, $mappings[0]) == 0)
        {
            push @group, shift @mappings;
        }

        for my $mapping (sort compare_requests @group)
        {
            my $origin = $mapping->{origin};
            my $cluster = $mapping->{cluster};

            if (!exists($origin->{cluster}) &&
                $cluster->{requests_used} + $origin->{requests} <= $cluster->{requests_limit})
            {
                $origin->{cluster} = $cluster;
                $cluster->{requests_used} = $cluster->{requests_used} + $origin->{requests};
            }
        }
    }

    return;
}

#
# Compare two mappings to decide which to use
#
sub compare_mappings
{
    my $a = shift;
    my $b = shift;

    return $b->{priority} <=> $a->{priority} ||
           $a->{distance} <=> $b->{distance};
}

#
# Compare two mappings to decide which to try first
#
sub compare_requests
{
    my $a_used = ( $a->{cluster}->{requests_used} * 100.0 ) / ( $a->{cluster}->{requests_limit} * 1.0 );
    my $b_used = ( $b->{cluster}->{requests_used} * 100.0 ) / ( $b->{cluster}->{requests_limit} * 1.0 );

    return $a_used <=> $b_used;
}

#
# Output DNS records for a server
#
sub output_server
{
    my $zonefile = shift;
    my $name = shift;
    my $cluster = shift;
    my $all = shift;

    while (my($index,$server) = each @{$cluster->{servers}})
    {
        if ($all || $server->{status} eq "up")
        {
            if ($server->{ipv4})
            {
                $zonefile->printf("  A(\"${name}\", \"$server->{ipv4}\", TTL(\"10m\")),\n", $index + 1);
            }

            if ($server->{ipv6})
            {
                $zonefile->printf("  AAAA(\"${name}\", \"$server->{ipv6}\", TTL(\"10m\")),\n", $index + 1);
            }
        }
    }

    return;
}
